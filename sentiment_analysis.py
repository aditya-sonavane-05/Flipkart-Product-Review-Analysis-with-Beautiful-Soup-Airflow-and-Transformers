# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lttNllzxtv9BGZjUva4GHm0XmmfWQf9t

#  **Sentiment Analysis and Visualization Notebook**

# Part 1: Setup and Environment Preparation

In this section, we set up the environment, install required libraries, and load the pre-trained BERT model for sentiment analysis.
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

"""# Load tokenizer and sentiment analysis model

"""

tokenizer = AutoTokenizer.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')
model = AutoModelForSequenceClassification.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

"""# Part 2: Sentiment Analysis

In this section, we perform sentiment analysis on sample text using the pre-trained BERT model.
"""

tokens = tokenizer.encode('It was good but could\'ve been better. Great', return_tensors='pt')
result = model(tokens)
sentiment_label = int(torch.argmax(result.logits)) + 1
print("Predicted Sentiment Label:", sentiment_label)

"""# Part 3: Data Loading and Preprocessing

In this section, we load the dataset, preprocess the text data, and prepare it for sentiment analysis.
"""

# Read and preprocess data
df = pd.read_csv("reviews.csv")
df["review"] = df["Review Title"] + " " + df["Review Paragraph"]

"""# Part 4: Sentiment Scoring

In this section, we define a sentiment scoring function and apply it to the entire dataset.
"""

# Define sentiment scoring function
def sentiment_score(review):
    tokens = tokenizer.encode(review, return_tensors='pt')
    result = model(tokens)
    return int(torch.argmax(result.logits)) + 1

# Apply sentiment scoring to the dataset
df['sentiment'] = df['review'].apply(lambda x: sentiment_score(x[:512]))

"""# Part 5: Sentiment Visualization

In this section, we visualize the sentiment distribution in the dataset using bar plots.
"""

# Map numeric sentiment classes to labels
sentiment_labels = {
    1: "Very Negative",
    2: "Negative",
    3: "Neutral",
    4: "Positive",
    5: "Very Positive"
}
df['sentiment_label'] = df['sentiment'].map(sentiment_labels)

# Visualize sentiment distribution
sentiment_counts = df['sentiment_label'].value_counts().sort_index()
plt.figure(figsize=(8, 6))
plt.bar(sentiment_counts.index, sentiment_counts, color='blue')
plt.xlabel('Sentiment Class')
plt.ylabel('Count')
plt.title('Sentiment Distribution')
plt.xticks(rotation=45)
plt.show()

"""# Part 6: Sentiment vs. Review Length Analysis

In this section, we explore the relationship between sentiment and review length using scatter plots.
"""

# Scatter plot: Sentiment vs. Review Length
plt.figure(figsize=(8, 6))
for sentiment_class in sentiment_labels.values():
    plt.scatter(df[df['sentiment_label'] == sentiment_class]['review'].apply(len),
                df[df['sentiment_label'] == sentiment_class]['sentiment'],
                label=sentiment_class, alpha=0.5)
plt.xlabel('Review Length')
plt.ylabel('Sentiment Score')
plt.title('Sentiment vs. Review Length')
plt.legend()
plt.show()